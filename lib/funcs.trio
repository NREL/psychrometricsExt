----------------------------------------------------------------------------------------------------
name:dewPoint
func
psychrometrics
doc:
  Computes dew-point temperature given ambient pressure and humidity ratio. Ported from 'Dew_point'
  VBA function in Eric Kozubal's psychrometrics spreadsheet.

  Parameters
  ----------
  
  - **p:** Ambient pressure
  - **w:** Humidity ratio
  
  Returns
  -------
  
  Dew-point temperature (°C)

  References
  ----------
  1. Equations (39)-(40), p. 1.9, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (p, w) => do
    // Coerce inputs to SI units
    p = p.to(1kPa)
    w = w.to(1)

    // Coefficients, ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.9
    c14: 6.54
    c15: 14.526
    c16: 0.7389
    c17: 0.09486
    c18: 0.4569

    // Water vapor partial pressure [kPa]
    pW: partialPressure(p, w, 1kPa)

    // Alpha, ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.9
    alpha: logE(pW)

    // Eq. (39), ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.9
    tDP: (c14 + c15*alpha + c16*pow(alpha,2) + c17*pow(alpha,3) + c18*pow(pW, 0.1984)).as(1°C)

    // If dew point is below 0°C, use alternate equation
    if (tDP < 0°C) do
      // Eq. (40), ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.9
      tDP = (6.09 + 12.608*alpha + 0.4959*pow(alpha,2)).as(1°C)
    end

    // Return
    tDP
  end
----------------------------------------------------------------------------------------------------
name:dryAirDensity
func
psychrometrics
doc:
  Computes dry air density given dry bulb temperature, humidity ratio, and ambient pressure. Ported
  from 'Dry_Air_Density' VBA function in Eric Kozubal's psychrometrics spreadsheet.

  Parameters
  ----------
  
  - **tDB:** Dry bulb temperature
  - **w:** Humidity ratio
  - **p:** Ambient pressure
  
  Returns
  -------
  
  Dry air density (kg/m³)

  Notes
  -----
  1. Dry air density is developed as specific volume in the ASHRAE handbook; density is the
     reciprocal. Note that the total density of an air-water mixture is
       rho_moist_air = rho * (1 + w)
     in which w is the humidity ratio.
  2. Output units are kilogram of dry air per cubic meter. However, because SkySpark does not have a
     standard unit 'kg_dry/m³', the (more ambiguous) unit 'kg/m³' is used instead.
  3. If no ambient pressure is specified, a pressure of 101.325 kPa (standard atmospheric pressure
     at sea level) is assumed.
  4. At this time there is no IP unit for density supported by SkySpark. Therefore, converting
     the output of this function to IP requires some shenanigans. For instance, to convert to
     (lb/ft³) use:
       dryAirDensity(tDB, w, p).as(1) * 1kg.to(1lb) / 1m³.to(1ft³)
     This gets you the custom unit '_lb/ft³'.

  References
  ----------
  1. Equation (28), p. 1.9, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (tDB, w, p:stdPressure(0m)) => do

    // Coerce inputs to SI units
    // Note: Temperature is now in Kelvin
    tK: tDB.to(1K)
    p = p.to(1kPa)

    // Remove unit (to avoid computation exceptions)
    tK = tK.as(1)
    p = p.as(1)
    w = w.as(1)

    // Dry air specific volume [m³/kg]:
    // Eq. (28), p. 1.8, ASHRAE Fundamentals Handbook (2013), SI Edition
    v: ( 0.287042 * tK * (1 + 1.607858*w) ) / p

    // Dry air density [kg/m³]
    rho: (1 / v).as(1kg/m³)
  end
----------------------------------------------------------------------------------------------------
name:humidityRatio
func
psychrometrics
doc:
  Computes humidity ratio given dry bulb temperature, wet bulb temperature, and ambient pressure.
  Ported from 'Hum_rat' VBA function in Eric Kozubal's psychrometrics spreadsheet.

  Parameters
  ----------
  
  - **tDB:** Dry bulb temperature
  - **tWB:** Wet bulb temperature
  - **p:** Ambient pressure
  
  Returns
  -------
  
  Humidity ratio (unitless)

  Notes
  -----
  1. If no ambient pressure is specified, a pressure of 101.325 kPa (standard atmospheric pressure
     at sea level) is assumed.
  2. The output humidity ratio is unitless (kg/kg or lb/lb). SkySpark also supports the unit
     'gH₂O/kgAir'; to convert the output of this function to 'gH₂O/kgAir' multiply by 1000.

  References
  ----------
  1. Equation (23), p. 1.8, *ASHRAE Fundamentals Handbook (2013), SI Edition*
  2. Equation (35), p. 1.9, *ASHRAE Fundamentals Handbook (2013), SI Edition*
  3. Equation (37), p. 1.9, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (tDB, tWB, p:stdPressure(0m)) => do
    // Coerce inputs to SI units
    tDB = tDB.to(1°C)
    tWB = tWB.to(1°C)
    p = p.to(1kPa)

    // Water vapor saturation pressure [kPa] at wet bulb temperature
    pWS: saturationPressure(tWB)

    // Remove unit (to avoid computation exceptions)
    // (Known units are still [°C] and [kPa])
    tDB = tDB.as(1)
    tWB = tWB.as(1)
    p = p.as(1)
    pWS = pWS.as(1)

    // Humidity ratio for saturated air at wet bulb temperature:
    // Eq. (23), ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.8
    ws: 0.621945 * pWS / (p - pWS)

    // Compute humidity ratio
    if (tDB >= 0°C) do
      // Above freezing: Eq. (35), ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.9
      w: ( (2501 - 2.326*tWB)*ws - 1.006*(tDB - tWB) ) / ( 2501 + 1.86*tDB - 4.186*tWB )
    else do
      // Below freezing: Eq. (37), ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.9
      w: ( (2830 - 0.24*tWB)*ws - 1.006*(tDB - tWB) ) / ( 2830 + 1.86*tDB - 2.1*tWB )
    end

    // Coerce to unitless quantity [kg/kg]
    w = w.as(1)
  end
----------------------------------------------------------------------------------------------------
name:humidityRatio2
func
psychrometrics
doc:
  Computes humidity ratio given dry bulb temperature, relative humidity, and ambient pressure.
  Ported from 'Hum_rat2' VBA function in Eric Kozubal's psychrometrics spreadsheet.

  Parameters
  ----------
  
  - **tDB:** Dry bulb temperature
  - **rh:** Relative humidity
  - **p:** Ambient pressure
  
  Returns
  -------
  
  Humidity ratio (unitless)

  Notes
  -----
  1. If no ambient pressure is specified, a pressure of 101.325 kPa (standard atmospheric pressure
     at sea level) is assumed.
  2. The output humidity ratio is unitless (kg/kg or lb/lb). SkySpark also supports the unit
     'gH₂O/kgAir'; to convert the output of this function to 'gH₂O/kgAir' multiply by 1000.

  References
  ----------
  1. Equation (22), p. 1.8, *ASHRAE Fundamentals Handbook (2013), SI Edition*
  2. Equation (24), p. 1.8, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (tDB, rh, p:stdPressure(0m)) => do
    // Coerce inputs to SI units
    p = p.to(1kPa)
    rh = rh.to(1%RH)

    // Water vapor saturation pressure [kPa] at dry bulb temperature
    pWS: saturationPressure(tDB)

    // Water vapor partial pressure [kPa]:
    // Eq. (24), p. 1.8, ASHRAE Fundamentals Handbook (2013), SI Edition
    pW: rh.as(1) * pWS / 100

    // Humidity ratio: Eq. (22), p. 1.8, ASHRAE Fundamentals Handbook (2013), SI Edition
    w: 0.621945 * pW / (p - pW)

    // Coerce to unitless quantity [kg/kg]
    w = w.as(1)
  end
----------------------------------------------------------------------------------------------------
name:moistAirDensity
func
psychrometrics
doc:
  Computes moist air density given dry bulb temperature, humidity ratio, and ambient pressure.
  Adapted from Greg Barker's 'Rho_MoistAir_TandPandW_kgPm3' function for Campbell Scientific data
  loggers.

  Parameters
  ----------

  - **tDB:** Dry bulb temperature
  - **w:** Humidity ratio
  - **p:** Ambient pressure

  Returns
  -------

  Moist air density (kg/m³)

  Notes
  -----
  1. If no ambient pressure is specified, a pressure of 101.325 kPa (standard atmospheric pressure
     at sea level) is assumed.
  2. Note that at this time there is no IP unit for density supported by SkySpark. Therefore,
     converting the output of this function to IP requires some shenanigans. For instance, to
     convert to (lb/ft³) use:
       moistAirDensity(tDB, w, p).as(1) * 1kg.to(1lb) / 1m³.to(1ft³)
     This gets you the custom unit '_lb/ft³'.

  References
  ----------
  1. Equation (11), p. 1.8, *ASHRAE Fundamentals Handbook (2009), SI Edition*
  2. Equation (28), p. 1.9, *ASHRAE Fundamentals Handbook (2009), SI Edition*
src:
  (tDB, w, p:stdPressure(0m)) => do
  
    // Coerce inputs to SI units
    // Note: Temperature is now in Kelvin
    tK: tDB.to(1K)
    p = p.to(1kPa)
  
    // Remove unit (to avoid computation exceptions)
    tK = tK.as(1)
    p = p.as(1)
    w = w.as(1)
  
    // Dry air specific volume [m³/kg]:
    // Eq. (28), p. 1.9, ASHRAE Fundamentals Handbook (2009), SI Edition
    v: ( 0.287042 * tK * (1 + 1.607858*w) ) / p
    
    // Moist air density [kg/m³]:
    // Eq. (11), p. 1.8, ASHRAE Fundamentals Handbook (2009), SI Edition
    rho: ((1 / v)*(1 + w)).as(1kg/m³)
  end
----------------------------------------------------------------------------------------------------
name:moistAirSpecificHeat
func
psychrometrics
doc:
  Computes the specific heat of moist air given humidity ratio.

  Parameters
  ----------
  
  - **w:** Humidity ratio
  
  Returns
  -------
  
  Specific heat of moist air (J/(kg_dry·K))

  Notes
  -----
  1. Per ASHRAE Standard 37, the specific heat of air is used primarily for calculating sensible
     cooling capacity. Therefore, despite being defined for moist air, it is reported per unit mass
     of dry air, i.e. per 'kg_dry'. This allows direct use in the various ASHRAE Standard 37
     capacity equations.
  2. At this time, SkySpark does not support any unit for specific heat. Therefore, this function
     returns the custom unit '_J/kg_dry/K'.
  3. The specific heat of dry air actually varies with temperature, but is approximately 1005
     J/(kg_dry·K) (the value used in this function) at typical room temperature. Similarly, the
     specific heat of water vapor also varies with temperature, but this function uses the fixed
     value 1805 J/(kg·K), following the equations in ASHRAE Standard 37 Section 7.3.3.
     
  References
  ----------
  1. Section 7.3.3, p. 11, *Methods of Testing for Rating Electrically Driven Unitary
     Air-Conditioning and Heat Pump Equipment,* ASHRAE Standard 37-2009.
src:
  (w) => do

    // Remove unit (to avoid computation exceptions)
    w = w.as(1)

    // Specific heat of air [J/(kg_dry·K)]:
    // Section 7.3.3, ASHRAE Standard 37-2009
    cp: 1005 + 1805*w

    // Return
    cp.as("_J/kg_dry/K")
  end
----------------------------------------------------------------------------------------------------
name:moistAirEnthalpy
func
psychrometrics
doc:
  Computes moist air specific enthalpy given dry bulb temperature and humidity ratio. Ported from
  'Enthalpy_Air_H2O' VBA function in Eric Kozubal's psychrometrics spreadsheet.

  Parameters
  ----------
  
  - **tDB:** Dry bulb temperature
  - **w:** Humidity ratio
  
  Returns
  -------
  
  Moist air specific enthalpy (kJ/kg)

  Notes
  -----
  1. This function returns specific enthalpy in SI units,
       h = 1.006*tDB + w * (2501 + 1.86*tDB)
     in which
     - h = specific enthalpy (kJ/kg),
     - tDB = dry bulb temperature (°C), and
     - w = humidity ratio.
     
     The equivalent IP calculation is:
       h = 0.240*tDB + w * (1061 + 0.444*tDB)
     in which
     - h = specific enthalpy (BTU/lb),
     - tDB = dry bulb temperature (°F),
     - w = humidity ratio.
     
     Because SI specific enthalpy is referenced to 0°C and IP specific enthalpy to 0°F, there is
     the IP quantity is offset from the SI quantity by approximately 17.8 kJ/kg (7.66 BTU/lb).
     (Note that this offset drifts slightly between the SI and IP approximations depending on the
     temperature.) To convert the output of this function to IP units, use the approximation:
       (moistAirEnthalpy(tDB, w) + 17.8kJ/kg).to(BTU/lb)
  2. SkySpark supports two sets of units for enthalpy: energy per unit mass of *moist air* (e.g.
     'kJ/kg') and energy per unit mass of *dry air* (e.g. 'kJ/kg_dry'). The SI units are the same,
     but the interpretation is different. The ASHRAE Fundamentals Handbook, SI Edition, specifies
     enthalpy kilojoules per kilogram of dry air. Therefore, SkySpark output units are 'kJ/kg_dry'.

  References
  ----------
  1. Equation (32), p. 1.9, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (tDB, w) => do

    // Coerce inputs to SI units
    tDB = tDB.to(1°C)

    // Remove unit (to avoid computation exceptions)
    tDB = tDB.as(1)

    // Moist air specific enthalpy [kJ/kg]:
    // Eq. (32), p. 1.9, ASHRAE Fundamentals Handbook (2013), SI Edition
    h: ( 1.006*tDB + w*(2501 + 1.86*tDB) ).as(1kJ/kg_dry)
  end
----------------------------------------------------------------------------------------------------
name:partialPressure
func
psychrometrics
doc:
  Computes water vapor partial pressure given ambient pressure and humidity ratio. Ported from 
  'Part_press' VBA function in Eric Kozubal's psychrometrics spreadsheet.

  Parameters
  ----------
  
  - **p:** Ambient pressure
  - **w:** Humidity ratio
  
  Returns
  -------
  
  Water vapor partial pressure (kPa)

  References
  ----------
  1. Equation (38), p. 1.9, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (p, w) => do

    // Coerce inputs to SI units
    p = p.to(1kPa)
    w = w.to(1)

    // Eq. (38), ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.9
    pW: (p * w / (0.621945 + w)).to(1kPa)
  end
----------------------------------------------------------------------------------------------------
name:relativeHumidity
func
psychrometrics
doc:
  Computes relative humidity given dry bulb temperature, wet bulb temperature, and ambient pressure.
  Ported from 'Rel_hum' VBA function in Eric Kozubal's psychrometrics spreadsheet.

  Parameters
  ----------
  
  - **tDB:** Dry bulb temperature
  - **tWB:** Wet bulb temperature
  - **p:** Ambient pressure
  
  Returns
  -------
  
  Relative humidity (%RH)

  Notes
  -----
  1. If no ambient pressure is specified, a pressure of 101.325 kPa (standard atmospheric pressure
     at sea level) is assumed.

  References
  ----------
  1. Equation (24), p. 1.8, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (tDB, tWB, p:stdPressure(0m)) => do
    // Humidity ratio
    w: humidityRatio(tDB, tWB, p)

    // Water vapor saturation pressure [kPa]
    pWS: saturationPressure(tDB)

    // Water vapor partial pressure [kPa]
    pW: partialPressure(p, w)

    // Relative humidity: Eq. (24), p. 1.8, ASHRAE Fundamentals Handbook (2013), SI Edition
    rh: pW / pWS

    // Coerce to percent RH
    (100*rh).to(1%RH)
  end
----------------------------------------------------------------------------------------------------
name:relativeHumidity2
func
psychrometrics
doc:
   Computes relative humidity given dry bulb temperature, humidity ratio, and ambient pressure.
   Ported from 'Rel_hum2' VBA function in Eric Kozubal's psychrometrics spreadsheet.

  Parameters
  ----------
  
  - **tDB:** Dry bulb temperature
  - **w:** Humidity ratio
  - **p:** Ambient pressure
  
  Returns
  -------
  
  Relative humidity (%RH)

  Notes
  -----
  1. If no ambient pressure is specified, a pressure of 101.325 kPa (standard atmospheric pressure
     at sea level) is assumed.

  References
  ----------
  1. Equation (24), p. 1.8, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (tDB, w, p:stdPressure(0m)) => do
    // Water vapor saturation pressure [kPa]
    pWS: saturationPressure(tDB)

    // Water vapor partial pressure [kPa]
    pW: partialPressure(p, w)

    // Relative humidity: Eq. (24), p. 1.8, ASHRAE Fundamentals Handbook (2013), SI Edition
    rh: pW / pWS

    // Coerce to percent RH
    (100*rh).to(1%RH)
  end
----------------------------------------------------------------------------------------------------
name:saturationPressure
func
psychrometrics
doc:
  Computes water vapor saturation pressure given ambient temperature. Ported from 'Sat_press' VBA
  function in Eric Kozubal's psychrometrics spreadsheet.

  Parameters
  ----------
  
  - **t:** Ambient temperature
  
  Returns
  -------
  
  Water vapor saturation pressure (kPa)

  References
  ----------
  1. Equations (5)-(6), p. 1.2, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (t) => do

    // Compute temperature in Kelvin
    tK: t.to(1K)

    // Remove unit (to avoid computation exceptions)
    // (We still know the unit is actually Kelvin)
    tK = tK.as(1)

    // Coefficients, ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.2
    c01: -5.6745359E3
    c02: 6.3925247E0
    c03: -9.6778430E-3
    c04: 6.2215701E-7
    c05: 2.0747825E-9
    c06: -9.4840240E-13
    c07: 4.1635019E0

    c08: -5.8002206E3
    c09: 1.3914993E0
    c10: -4.8640239E-2
    c11: 4.1764768E-5
    c12: -1.4452093E-8
    c13: 6.5459673E0

    if (t.to(1°C) < 0°C) do
      // Over ice: Eq. (5), ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.2
      pWS: exp(
        c01/tK + c02 + c03*tK + c04*pow(tK,2) + c05*pow(tK,3) + c06*pow(tK,4) + c07*logE(tK)
        ).as(1Pa)
    else do
      // Over liquid water: Eq. (6), ASHRAE Fundamentals Handbook (2013), SI Edition, p. 1.2
      pWS: exp(
        c08/tK + c09 + c10*tK + c11*pow(tK,2) + c12*pow(tK,3) + c13*logE(tK)
        ).as(1Pa)
    end

    // Return
    pWS.to(1kPa)
  end
----------------------------------------------------------------------------------------------------
name:stdPressure
func
psychrometrics
doc:
  Computes standard atmospheric pressure given elevation. Ported from 'STD_Press' VBA function in
  Eric Kozubal's psychrometrics spreadsheet.
  
  Parameters
  ----------
  
  - **elev:** Elevation
  
  Returns
  -------
  
  Standard atmospheric pressure (kPa)

  References
  ----------
  1. Equation (3), p. 1.1, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (elev) => do

    // Coerce elevation to SI units
    elev = elev.to(1m)

    // Remove unit (to avoid computation exceptions)
    elev = elev.as(1)

    // Eq. (3), p. 1.1, ASHRAE Fundamentals Handbook (2013), SI Edition
    p: 101.325 * (1 - elev*2.25577E-5).pow(5.2559)

    // Return
    p.as(1kPa)
  end
----------------------------------------------------------------------------------------------------
name:stdTemp
func
psychrometrics
doc:
  Computes standard atmospheric temperature given elevation. Ported from 'STD_Temp' VBA function in
  Eric Kozubal's psychrometrics spreadsheet.
  
  Parameters
  ----------
  
  - **elev:** Elevation
  
  Returns
  -------
  
  Standard atmospheric temperature (°C)
  
  References
  ----------
  1. Equation (4), p. 1.1, *ASHRAE Fundamentals Handbook (2013), SI Edition*
src:
  (elev) => do

    // Coerce elevation to SI units
    elev = elev.to(1m)

    // Remove unit (to avoid computation exceptions)
    elev = elev.as(1)

    // Eq. (3), p. 1.1, ASHRAE Fundamentals Handbook (2013), SI Edition
    p: 15 - 0.0065*elev

    // Return
    p.as(1°C)
  end
----------------------------------------------------------------------------------------------------
name:waterDensity
func
psychrometrics
doc:
  Approximates the density of pure liquid water as a function of temperature. Models are
  fit from reference data in Table 13.2 of Wagner and Pruß (2002) and are valid within 0.1%
  for all temperatures between freezing and boiling and pressures between 50 and 1000 kPa.
  
  Parameters
  ----------

  - **t:** Water temperature
  - **p:** Water pressure

  Returns
  -------

  Water density (kg/m³)

  Notes
  -----
  1. If no pressure is specified, a pressure of 101.325 kPa (standard atmospheric pressure at
     sea level) is assumed.
  2. Note that at this time there is no IP unit for density supported by SkySpark. Therefore,
     converting the output of this function to IP requires some shenanigans. For instance, to
     convert to (lb/ft³) use:
       waterDensity(t).as(1) * 1kg.to(1lb) / 1m³.to(1ft³)
     This gets you the custom unit '_lb/ft³'.
     
  References
  ----------
  1. W. Wagner and A. Pruß, "The IAPWS Formulation 1995 for the Thermodynamic Properties of
     Ordinary Water Substance for General and Scientific Use," *Journal of Physical and Chemical
     Reference Data*, vol. 31, no. 2, pp. 387-535, 2002.
src:
  (t, p:stdPressure(0m)) => do
    // Coerce inputs to SI units
    t = t.to(1K)
    p = p.to(1kPa)

    // Pressure to MPa (not a SkySpark-supported unit)
    p = (p / 1000).as("")
     
    // Proxy variable based on temperature
    s: sqrt((t/273)-1)
    
    // Fitted model coefficients
    a: [999.848, -2.63339, 63.7589, -285.047, 0.465935] 
    
    // Calcs
    dens: a[0] + a[1]*s + a[2]*pow(s,2) + a[3]*pow(s,3) + a[4]*p

    // Output
    dens.as(1kg/m³)
  end
----------------------------------------------------------------------------------------------------
name:waterSpecificHeat
func
psychrometrics
doc:
  Approximates the specific heat of pure liquid water as a function of temperature. Models are
  fit from reference data in Table 13.2 of Wagner and Pruß (2002) and are valid within 0.1%
  for all temperatures between freezing and boiling and pressures between 50 and 1000 kPa.
  
  Parameters
  ----------

  - **t:** Water temperature
  - **p:** Water pressure

  Returns
  -------

  Water density (kg/m³)

  Notes
  -----
  1. If no pressure is specified, a pressure of 101.325 kPa (standard atmospheric pressure at
     sea level) is assumed.
  2. The SkySpark unit of specific heat is, somewhat confusingly, *J/kg°K*, although the
     SI units for energy, mass, and absolute temperature are *J*, *kg*, and *K*, respectively.
     (Note the lack of *°*.)
  3. There is no IP unit for specific heat defined in SkySpark.
     
  References
  ----------
  1. W. Wagner and A. Pruß, "The IAPWS Formulation 1995 for the Thermodynamic Properties of
     Ordinary Water Substance for General and Scientific Use," *Journal of Physical and Chemical
     Reference Data*, vol. 31, no. 2, pp. 387-535, 2002.
src:
  (t, p:stdPressure(0m)) => do
    // Coerce inputs to SI units
    t = t.to(1K)
    p = p.to(1kPa)

    // Pressure to MPa (not a SkySpark-supported unit)
    p = (p / 1000).as("")
     
    // Proxy variable based on temperature
    s: sqrt((t/273)-1)
    
    // Fitted model coefficients
    a: [4.21931, 0.0581587, -1.97658, 7.05209, -9.99348, 5.69867, -0.00423423, 0.00351974]

    // Calcs
    cp: a[0] + a[1]*s + a[2]*pow(s,2) + a[3]*pow(s,3) + a[4]*pow(s,4) + a[5]*pow(s,5) + a[6]*p + a[7]*s*p

    // Output
    (1000*cp).as(1J/kg°K)
  end
----------------------------------------------------------------------------------------------------
name:wetBulb
func
psychrometrics
doc:
  Computes wet-bulb temperature given dry bulb temperature, relative humidity, and ambient pressure.
  Uses Newton-Raphson (NR) method to converge to correct wet bulb temperature, typically within 2-3
  iterations. Ported from 'Wet_bulb' VBA function in Eric Kozubal's psychrometrics spreadsheet.

  Parameters
  ----------
  
  - **tDB:** Dry bulb temperature
  - **rh:** Relative humidity
  - **p:** Ambient pressure
  - **opts:** A dict of control options; see *Options*

  Options
  -------
  
  The following control options are supported:
  
  - 'maxIter': Maximum Newton-Raphson iterations (Default = 5)
  - 'tol': Relative tolerance target; applied to calculated humidity ratios (Default = 1E-5)
  - 'delta': Delta for computing derivative (Default = 0.001Δ°C)
  - 'checked': Governs action if tolerance is not met: if true, throw exception; if false return NA
    (Default = false)

  Returns
  -------
  
  Wet bulb temperature (°C)

  Notes
  -----
  1. This function computes the correct wet bulb temperature numerically by comparing output from
     `humidityRatio` and `humidityRatio2`. Iterations terminate when the two humidity ratio
     calculations match within absolute tolerance 'tol' or after 'maxIter' iterations, whichever
     comes first.
  2. Since Axon has no while loop construct, this function uses a recursive approach.
  3. Set option 'checked' to true to throw an exception if the function does not terminate with the
     two humidity ratios within the specified tolerance. The default value of 'checked:false' causes
     the function to return NA if the humidity ratios do not match within tolerance.
  4. If no ambient pressure is specified, a pressure of 101.325 kPa (standard atmospheric pressure
     at sea level) is assumed.

  References
  ----------
  See documentation for `humidityRatio` and `humidityRatio2`.
src:
  (tDB, rh, p:stdPressure(0m), opts:{maxIter:5, tol:1E-5, delta:0.001Δ°C, checked:false}) => do

    //////////////////////////////////////////////////////////////////////////////////////////////////
    // Setup
    //////////////////////////////////////////////////////////////////////////////////////////////////
    
    // Default options
    if (opts.missing("maxIter")) opts = opts.set("maxIter", 5)
    if (opts.missing("tol"))     opts = opts.set("tol", 1E-5)
    if (opts.missing("delta"))   opts = opts.set("delta", 0.001Δ°C)
    if (opts.missing("checked")) opts = opts.set("checked", false)

    //////////////////////////////////////////////////////////////////////////////////////////////////
    // NR Update Function
    //////////////////////////////////////////////////////////////////////////////////////////////////
    wetBulbUpdate: (tWB, iter) => do
      // Note: 'tDB', 'rh', 'p', 'wTarget', and 'opts' from outer scope

      // Compute humidity ratio from current value of tWB
      w: humidityRatio(tDB, tWB, p)

      // Check convergence
      if (abs(wTarget - w) <= opts->tol) return tWB

      // Check maximum iterations; return NA if exceeded
      iter = iter + 1;
      if (iter > opts->maxIter) return na()

      // NR Update...

      // Approximate dw / dtWB
      w2: humidityRatio(tDB, tWB - opts->delta, p)
      dwdt: (w - w2).as(1) / opts->delta.as(1)

      // Perform update
      tWB = tWB + ( (wTarget - w) / dwdt ).as(1Δ°C)

      // Call recursion (iterate)
      tWB = wetBulbUpdate(tWB, iter)
    end

    //////////////////////////////////////////////////////////////////////////////////////////////////
    // Main
    //////////////////////////////////////////////////////////////////////////////////////////////////

    // Coerce inputs to SI units
    tDB = tDB.to(1°C)
    rh = rh.to(1%RH)
    p = p.to(1kPa)

    // Target humidity ratio
    wTarget: humidityRatio2(tDB, rh, p)

    // Initial guess for wet bulb temperature
    tWB: tDB

    // Perform Newton-Raphson iteration
    // Will return NA if max. iterations exceeded
    tWB = wetBulbUpdate(tWB, 0)

    // Throw exception if result is checked
    if (opts->checked and tWB == na()) throw "Newton-Raphson algorithm failed to converge."

    // Return
    tWB
  end